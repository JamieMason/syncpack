"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(n),y=s,m=d["".concat(c,".").concat(y)]||d[y]||u[y]||a;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=y;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={id:"list",title:"list"},i=void 0,o={unversionedId:"list",id:"list",title:"list",description:"List all dependencies required by your packages.",source:"@site/docs/list.mdx",sourceDirName:".",slug:"/list",permalink:"/syncpack/list",draft:!1,editUrl:"https://github.com/JamieMason/syncpack/tree/master/site/docs/list.mdx",tags:[],version:"current",lastUpdatedBy:"Jamie Mason",lastUpdatedAt:1676996009,formattedLastUpdatedAt:"Feb 21, 2023",frontMatter:{id:"list",title:"list"},sidebar:"docs",previous:{title:"list-mismatches",permalink:"/syncpack/list-mismatches"},next:{title:"set-semver-ranges",permalink:"/syncpack/set-semver-ranges"}},c={},p=[{value:"CLI Options",id:"cli-options",level:2},{value:"Examples",id:"examples",level:2}],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"List all dependencies required by your packages."),(0,s.kt)("h2",{id:"cli-options"},"CLI Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"-s, --source [pattern]  glob pattern for package.json files to read from\n-f, --filter [pattern]  only include dependencies whose name matches this regex\n-c, --config <path>     path to a syncpack config file\n-t, --types <names>     only include dependencies matching these types (eg. types=dev,prod,myCustomType)\n-h, --help              display help for command\n")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# uses defaults for resolving packages\nsyncpack list\n# uses packages defined by --source when provided\nsyncpack list --source "apps/*/package.json"\n# multiple globs can be provided like this\nsyncpack list --source "apps/*/package.json" --source "core/*/package.json"\n# uses dependencies regular expression defined by --filter when provided\nsyncpack list --filter "typescript|tslint"\n# only inspect "devDependencies"\nsyncpack list --types dev\n# only inspect "devDependencies" and "peerDependencies"\nsyncpack list --types dev,peer\n')))}u.isMDXComponent=!0}}]);